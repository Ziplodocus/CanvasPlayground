class a{constructor(t=a.randHex(),e=a.randHex(),i=a.randHex(),s=1){this.r=t,this.g=e,this.b=i,this.a=s}get rgba(){return`rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`}static avgColors(t){const e={r:0,g:0,b:0};t.forEach(i=>{for(let s in e)e[s]+=Math.pow(i[s],2)});for(let i in e)e[i]=Math.sqrt(e[i]/t.length);return new a(e.r,e.g,e.b)}static randHex(){return Math.round(Math.random()*255)}}class n{constructor(t=0,e=0){this.x=t,this.y=e}get norm(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}copy(){return new n(this.x,this.y)}set(t,e){this.x=t,this.y=e}scale(t){this.x*=t,this.y*=t}adjust(t){this.x+=t.x,this.y+=t.y}perp(){return new n(-this.y,this.x)}mult(t){return new n(this.x*t,this.y*t)}dot(t){return this.x*t.x+this.y*t.y}add(t){return new n(this.x+t.x,this.y+t.y)}minus(t){return this.add(t.mult(-1))}getUnit(){return this.mult(1/this.norm)}}const v=Math.PI,L=()=>2*v*Math.random(),U=()=>{const c=L();return new n(Math.cos(c),Math.sin(c))};class E{constructor(){this.events={}}on(t,e){const i=this.events[t];i?i.push(e):this.events[t]=[e]}trigger(t,e){const i=this.events[t];i&&i.forEach(s=>s(e))}off(t,e){const i=this.events[t].indexOf(e);i!==-1&&this.events[t].splice(i,1)}}class V extends E{constructor(t,e,i){super();this.move=()=>{this.position.adjust(this.velocity)},this.handleBoundCollision=s=>{s.direction==="horizontal"&&(this.vx*=-1,this.x+=s.adj),s.direction==="vertical"&&(this.vy*=-1,this.y+=s.adj)},this.handleCollision=s=>{this.velocity=s.v},this.position=t,this.velocity=U().mult(e),this.color=new a,this.lineColor=new a,this.radius=i,this.on("move",this.move),this.on("boundsCollide",this.handleBoundCollision),this.on("collision",this.handleCollision)}get x(){return this.position.x}get y(){return this.position.y}get vx(){return this.velocity.x}get vy(){return this.velocity.y}get speed(){return this.velocity.norm}get direction(){return Math.acos(this.vx/this.speed)}get mass(){return 4/3*v*Math.pow(this.radius,3)}set x(t){this.position.x=t}set y(t){this.position.y=t}set vx(t){this.velocity.x=t}set vy(t){this.velocity.y=t}}const W={minSpeed:.3,maxSpeed:.5,minRadius:2,maxRadius:8,initialParticles:15,vicinity:50};class D extends E{constructor(t,e,i){super();this.incrementTime=s=>{const o=s.details;o.move(),this.checkParticleVicinity(o),this.checkForBoundsCollision(o)},this.particles=[],this.options=Object.assign(Object.assign({},W),t),this.bounds={x:e,y:i};for(let s=this.options.initialParticles;s>0;s--)this.add();this.on("incrementTime",this.incrementTime)}checkForBoundsCollision(t){const e=t.x-t.radius<=0,i=t.x+t.radius>=this.bounds.x,s=t.y-t.radius<=0,o=t.y+t.radius>=this.bounds.y;(e||i)&&t.trigger("boundsCollide",{direction:"horizontal",adj:e?t.radius-t.x:this.bounds.x-t.x-t.radius}),(o||s)&&t.trigger("boundsCollide",{direction:"vertical",adj:s?t.radius-t.y:this.bounds.y-t.y-t.radius})}checkParticleVicinity(t){let e=this.particles.indexOf(t);this.particles.slice(e).forEach(i=>{if(t==i)return;const s=t.position.minus(i.position),o=s.norm,r=t.radius+i.radius;if(o<=this.options.vicinity)this.trigger("inVicinity",{p:t,q:i});else if(this.options.vicinity>r)return;const u=o<=r;if(u){let C=function(){const P=r-o,k=t.radius/r,A=l.mult((1-k)*P);t.position.adjust(A);const T=l.mult(k*-P);i.position.adjust(T)};var $=C;const l=u&&s.getUnit(),d=u&&s.perp().getUnit();C();const p=t.velocity.dot(l),g=i.velocity.dot(l),x=t.velocity.dot(d),f=i.velocity.dot(d),b=t.mass+i.mass,w=(i.mass*(g-p)+t.mass*p+i.mass*g)/b,M=(t.mass*(p-g)+t.mass*p+i.mass*g)/b,m=new n(1,0),y=new n(0,1),S=l.mult(w).dot(m)+d.mult(x).dot(m),O=l.mult(w).dot(y)+d.mult(x).dot(y),H=l.mult(M).dot(m)+d.mult(f).dot(m),R=l.mult(M).dot(y)+d.mult(f).dot(y),j=new n(S,O),z=new n(H,R);t.trigger("collision",{v:j}),i.trigger("collision",{v:z})}})}randomPosition(){const t=Math.random()*(this.bounds.x-2*this.options.maxRadius)+this.options.maxRadius,e=Math.random()*(this.bounds.y-2*this.options.maxRadius)+this.options.maxRadius;return new n(t,e)}randomSpeed(){const t=this.options;return Math.random()*(t.maxSpeed-t.minSpeed)+t.minSpeed}add(t=this.randomPosition()){const e=this.randomSpeed(),i=this.options.minRadius+(this.options.maxRadius-this.options.minRadius)*((e-this.options.minSpeed)/(this.options.maxSpeed-this.options.minSpeed+1e-6));this.particles.push(new V(t,e,i))}}const B={fillOpacity:.5,edgeOpacity:1,mouseEdges:!0,fill:!0,fillColor:void 0,outline:!1,outlineColor:void 0,edges:!0,pixelDensity:1};class F extends HTMLCanvasElement{constructor(){super();this.hoverHandler=o=>{requestAnimationFrame(()=>{const r=this.options.pixelDensity;this.mousePosition.set(o.offsetX*r,o.offsetY*r)})},this.mouseClickHandler=o=>{this.particleManager.add(this.mousePosition.copy())},this.mouseEnterHandler=()=>{this.mousePosition.active=!0},this.mouseLeaveHandler=()=>{this.mousePosition.active=!1},this.inVicinityHandler=o=>{this.options.edges&&this.renderEdge(o.p,o.q)},this.resize=()=>{const o={width:this.width,height:this.height,area:this.area};this.refresh();const r=this.area/o.area;this.particleManager.options.vicinity*=Math.pow(r,.5),this.particleManager.particles.forEach(h=>{h.position.set(h.x*(this.width/o.width),h.y*(this.height/o.height))}),this.particleManager.bounds.x=this.width,this.particleManager.bounds.y=this.height};const t=JSON.parse(this.getAttribute("data-canvas-options")),e=JSON.parse(this.getAttribute("data-particle-options"));this.options=Object.assign(Object.assign({},B),t),this.width=this.scrollWidth*this.options.pixelDensity,this.height=this.scrollHeight*this.options.pixelDensity,this.ctx=this.getContext("2d"),this.particleManager=new D(e,this.width,this.height),this.mousePosition=new n,new ResizeObserver(this.createResizeHandler()).observe(this),this.addEventListener("mouseenter",this.mouseEnterHandler),this.addEventListener("mousemove",this.hoverHandler,{passive:!0}),this.addEventListener("mouseleave",this.mouseLeaveHandler),this.addEventListener("click",this.mouseClickHandler),this.particleManager.on("inVicinity",this.inVicinityHandler);const s=()=>{this.setUpParticleRendering(),this.particleManager.particles.forEach(o=>{this.particleManager.trigger("incrementTime",{details:o})}),this.particleManager.particles.forEach(o=>{this.renderParticle(o)}),this.mousePosition.active&&this.options.mouseEdges&&this.renderMouseEdges(),requestAnimationFrame(s)};s()}get area(){return this.width*this.height}createResizeHandler(){let t;return e=>{e.forEach(i=>{this===i.target&&(clearTimeout(t),t=setTimeout(this.resize,200))})}}refresh(){this.width=this.scrollWidth*this.options.pixelDensity,this.height=this.scrollHeight*this.options.pixelDensity}setUpParticleRendering(){this.ctx.clearRect(0,0,this.width,this.height),this.ctx.lineCap="round"}renderParticle(t){var e,i;const s=this.ctx,o=this.options;s.globalAlpha=o.fillOpacity,(o.fill||o.outline)&&(s.beginPath(),s.arc(t.x,t.y,t.radius,0,2*v)),o.fill&&(s.fillStyle=(e=o.fillColor)!==null&&e!==void 0?e:t.color.rgba,s.fill()),o.outline&&(s.strokeStyle=(i=o.outlineColor)!==null&&i!==void 0?i:t.lineColor.rgba,s.lineWidth=t.radius/3,s.stroke()),s.globalAlpha=1}renderEdge(t,e){const i=this.ctx,s=this.options,r=t.position.minus(e.position).norm,h=t.radius+e.radius,u=s.edgeOpacity-(r-h)/((this.particleManager.options.vicinity-h)/s.edgeOpacity);switch(!0){case s.outlineColor!==void 0:i.strokeStyle=s.outlineColor;break;case s.outline:i.strokeStyle=a.avgColors([t.lineColor,e.lineColor]).rgba;break;default:i.strokeStyle=a.avgColors([t.color,e.color]).rgba}i.globalAlpha=u,i.lineWidth=h/5,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.globalAlpha=1}renderMouseEdges(){this.particleManager.particles.forEach(t=>{const e=t.position.minus(this.mousePosition).norm;if(e>this.particleManager.options.vicinity*1.5)return;const i=this.options.edgeOpacity-e/(this.particleManager.options.vicinity*1.5/this.options.edgeOpacity),s=this.ctx;switch(!0){case this.options.outlineColor!==void 0:s.strokeStyle=this.options.outlineColor;break;case this.options.outline:s.strokeStyle=t.lineColor.rgba;break;case this.options.fillColor!==void 0:s.strokeStyle=this.options.fillColor;break;default:s.strokeStyle=t.color.rgba}s.globalAlpha=i,s.lineWidth=t.radius*.8,s.beginPath(),s.moveTo(t.x,t.y),s.lineTo(this.mousePosition.x,this.mousePosition.y),s.stroke(),s.globalAlpha=1})}computedStyle(t){return getComputedStyle(this).getPropertyValue(t)}}window.customElements.define("particle-canvas",F,{extends:"canvas"});
//# sourceMappingURL=vendor.b72a5394.js.map
