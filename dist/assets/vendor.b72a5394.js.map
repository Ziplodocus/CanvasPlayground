{"version":3,"file":"vendor.b72a5394.js","sources":["../../node_modules/particle-web-component/dist/utility-classes/Color.js","../../node_modules/particle-web-component/dist/utility-classes/Vector2d.js","../../node_modules/particle-web-component/dist/helpers/helpers.js","../../node_modules/particle-web-component/dist/utility-classes/EventEmitter.js","../../node_modules/particle-web-component/dist/classes/Particle.js","../../node_modules/particle-web-component/dist/classes/ParticleManager.js","../../node_modules/particle-web-component/dist/classes/ParticleCanvas.js"],"sourcesContent":["export class Color {\r\n    constructor(r = Color.randHex(), g = Color.randHex(), b = Color.randHex(), a = 1) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n    get rgba() { return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`; }\r\n    //returns a new color from the average values of an array of other colors,\r\n    static avgColors(colorArr) {\r\n        const vals = { r: 0, g: 0, b: 0 };\r\n        colorArr.forEach(color => {\r\n            for (let val in vals) {\r\n                vals[val] += Math.pow(color[val], 2);\r\n            }\r\n        });\r\n        for (let val in vals) {\r\n            vals[val] = Math.sqrt(vals[val] / colorArr.length);\r\n        }\r\n        return new Color(vals.r, vals.g, vals.b);\r\n    }\r\n    static randHex() {\r\n        return Math.round(Math.random() * 255);\r\n    }\r\n}\r\n//# sourceMappingURL=Color.js.map","export class Vector2d {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    get norm() {\r\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\r\n    }\r\n    copy() {\r\n        return new Vector2d(this.x, this.y);\r\n    }\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    scale(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n    }\r\n    adjust(vtr) {\r\n        this.x += vtr.x;\r\n        this.y += vtr.y;\r\n    }\r\n    perp() {\r\n        return new Vector2d(-this.y, this.x);\r\n    }\r\n    mult(scalar) {\r\n        return new Vector2d(this.x * scalar, this.y * scalar);\r\n    }\r\n    dot(a) {\r\n        return this.x * a.x + this.y * a.y;\r\n    }\r\n    add(vtr) {\r\n        return new Vector2d(this.x + vtr.x, this.y + vtr.y);\r\n    }\r\n    minus(vtr) {\r\n        return this.add(vtr.mult(-1));\r\n    }\r\n    getUnit() {\r\n        return this.mult(1 / this.norm);\r\n    }\r\n}\r\n//# sourceMappingURL=Vector2d.js.map","import { Vector2d } from \"../utility-classes/Vector2d.js\";\r\nconst pi = Math.PI;\r\nconst randomAngle = () => 2 * pi * Math.random();\r\nconst randomAngleVtr = () => {\r\n    const directionRadeons = randomAngle();\r\n    return new Vector2d(Math.cos(directionRadeons), Math.sin(directionRadeons));\r\n};\r\nexport { randomAngle, pi, randomAngleVtr };\r\n//# sourceMappingURL=helpers.js.map","export class EventEmitter {\r\n    constructor() {\r\n        this.events = {};\r\n    }\r\n    on(name, callback) {\r\n        const callbacks = this.events[name];\r\n        if (!callbacks)\r\n            this.events[name] = [callback];\r\n        else\r\n            callbacks.push(callback);\r\n    }\r\n    trigger(name, event) {\r\n        const callbacks = this.events[name];\r\n        if (callbacks)\r\n            callbacks.forEach(callback => callback(event));\r\n    }\r\n    off(name, callback) {\r\n        const index = this.events[name].indexOf(callback);\r\n        if (index !== -1) {\r\n            this.events[name].splice(index, 1);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=EventEmitter.js.map","import { Color } from '../utility-classes/Color.js';\r\nimport { pi, randomAngleVtr } from '../helpers/helpers.js';\r\nimport { EventEmitter } from '../utility-classes/EventEmitter.js';\r\nexport class Particle extends EventEmitter {\r\n    constructor(position, speed, radius) {\r\n        super();\r\n        this.move = () => {\r\n            this.position.adjust(this.velocity);\r\n        };\r\n        this.handleBoundCollision = (e) => {\r\n            if (e.direction === 'horizontal') {\r\n                this.vx *= -1;\r\n                this.x += e.adj;\r\n            }\r\n            if (e.direction === 'vertical') {\r\n                this.vy *= -1;\r\n                this.y += e.adj;\r\n            }\r\n        };\r\n        this.handleCollision = (e) => {\r\n            this.velocity = e.v;\r\n        };\r\n        this.position = position;\r\n        this.velocity = randomAngleVtr().mult(speed);\r\n        this.color = new Color();\r\n        this.lineColor = new Color();\r\n        this.radius = radius;\r\n        this.on('move', this.move);\r\n        this.on('boundsCollide', this.handleBoundCollision);\r\n        this.on('collision', this.handleCollision);\r\n    }\r\n    get x() { return this.position.x; }\r\n    get y() { return this.position.y; }\r\n    get vx() { return this.velocity.x; }\r\n    get vy() { return this.velocity.y; }\r\n    get speed() { return this.velocity.norm; }\r\n    get direction() { return Math.acos(this.vx / this.speed); }\r\n    get mass() { return 4 / 3 * pi * Math.pow(this.radius, 3); }\r\n    set x(posX) { this.position.x = posX; }\r\n    set y(posY) { this.position.y = posY; }\r\n    set vx(velX) { this.velocity.x = velX; }\r\n    set vy(velY) { this.velocity.y = velY; }\r\n}\r\n//# sourceMappingURL=Particle.js.map","import { Particle } from \"./Particle.js\";\r\nimport { EventEmitter } from \"../utility-classes/EventEmitter.js\";\r\nimport { Vector2d } from \"../utility-classes/Vector2d.js\";\r\nconst defaultParticleOptions = {\r\n    minSpeed: 0.3,\r\n    maxSpeed: 0.5,\r\n    minRadius: 2,\r\n    maxRadius: 8,\r\n    initialParticles: 15,\r\n    vicinity: 50\r\n};\r\nexport class ParticleManager extends EventEmitter {\r\n    constructor(options, width, height) {\r\n        super();\r\n        this.incrementTime = (e) => {\r\n            const p = e.details;\r\n            p.move();\r\n            this.checkParticleVicinity(p);\r\n            this.checkForBoundsCollision(p);\r\n        };\r\n        this.particles = [];\r\n        this.options = Object.assign(Object.assign({}, defaultParticleOptions), options);\r\n        this.bounds = { x: width, y: height };\r\n        for (let i = this.options.initialParticles; i > 0; i--) {\r\n            this.add();\r\n        }\r\n        this.on('incrementTime', this.incrementTime);\r\n    }\r\n    checkForBoundsCollision(p) {\r\n        const isLeft = p.x - p.radius <= 0;\r\n        const isRight = p.x + p.radius >= this.bounds.x;\r\n        const isOver = p.y - p.radius <= 0;\r\n        const isUnder = p.y + p.radius >= this.bounds.y;\r\n        if (isLeft || isRight) {\r\n            p.trigger('boundsCollide', {\r\n                direction: 'horizontal',\r\n                adj: isLeft ? p.radius - p.x : this.bounds.x - p.x - p.radius\r\n            });\r\n        }\r\n        if (isUnder || isOver) {\r\n            p.trigger('boundsCollide', {\r\n                direction: 'vertical',\r\n                adj: isOver ? p.radius - p.y : this.bounds.y - p.y - p.radius\r\n            });\r\n        }\r\n    }\r\n    checkParticleVicinity(p) {\r\n        let i = this.particles.indexOf(p);\r\n        this.particles.slice(i).forEach(q => {\r\n            if (p == q)\r\n                return;\r\n            //calcing values\r\n            const perp = p.position.minus(q.position);\r\n            const distance = perp.norm;\r\n            const radii = p.radius + q.radius;\r\n            const isInVicinity = (distance <= this.options.vicinity);\r\n            if (isInVicinity) {\r\n                this.trigger('inVicinity', { p, q });\r\n            }\r\n            else if (this.options.vicinity > radii)\r\n                return;\r\n            const isCollision = (distance <= radii);\r\n            //Handles if this particle collides with another, redirecting both\r\n            if (isCollision) {\r\n                const perpunit = isCollision && perp.getUnit();\r\n                const tangunit = isCollision && perp.perp().getUnit();\r\n                handleOverlap();\r\n                //u1 is the initial velocity of this particle and u2 the initial velocity of the colliding particle\r\n                //Projection of initial velocity along the perpendicular and tangent direction of the point of contact\r\n                const upp = p.velocity.dot(perpunit);\r\n                const uqp = q.velocity.dot(perpunit);\r\n                const upt = p.velocity.dot(tangunit);\r\n                const uqt = q.velocity.dot(tangunit);\r\n                /*\r\n                New velocity in the direction of the perpendicular\r\n                The velocity tangent to the point of collision does not change,\r\n                but the perpendicular does, hence turning the 2dimensional problem\r\n                into a 1dimensional, (1 dimensional collision equation)\r\n                */\r\n                const totalMass = p.mass + q.mass;\r\n                const vpp = (q.mass * (uqp - upp) + p.mass * upp + q.mass * uqp) / totalMass;\r\n                const vqp = (p.mass * (upp - uqp) + p.mass * upp + q.mass * uqp) / totalMass;\r\n                //Projecting the perp and tang velocities back onto cartesian coordinates\r\n                const xUnit = new Vector2d(1, 0);\r\n                const yUnit = new Vector2d(0, 1);\r\n                const pvx = perpunit.mult(vpp).dot(xUnit) + tangunit.mult(upt).dot(xUnit);\r\n                const pvy = perpunit.mult(vpp).dot(yUnit) + tangunit.mult(upt).dot(yUnit);\r\n                const qvx = perpunit.mult(vqp).dot(xUnit) + tangunit.mult(uqt).dot(xUnit);\r\n                const qvy = perpunit.mult(vqp).dot(yUnit) + tangunit.mult(uqt).dot(yUnit);\r\n                const pv = new Vector2d(pvx, pvy);\r\n                const qv = new Vector2d(qvx, qvy);\r\n                //Setting the new velocities on the particles\r\n                p.trigger('collision', { v: pv });\r\n                q.trigger('collision', { v: qv });\r\n                function handleOverlap() {\r\n                    const diff = radii - distance;\r\n                    const ratio = p.radius / radii;\r\n                    const padj = perpunit.mult((1 - ratio) * diff);\r\n                    p.position.adjust(padj);\r\n                    const qadj = perpunit.mult(ratio * -diff);\r\n                    q.position.adjust(qadj);\r\n                }\r\n            }\r\n            // Shifts particles to the point of minimal( not zero! ) contact if they are overlapped\r\n        });\r\n    }\r\n    randomPosition() {\r\n        const randX = Math.random() * (this.bounds.x - 2 * this.options.maxRadius) + this.options.maxRadius;\r\n        const randY = Math.random() * (this.bounds.y - 2 * this.options.maxRadius) + this.options.maxRadius;\r\n        return new Vector2d(randX, randY);\r\n    }\r\n    randomSpeed() {\r\n        const ops = this.options;\r\n        return Math.random() * (ops.maxSpeed - ops.minSpeed) + ops.minSpeed;\r\n    }\r\n    add(pos = this.randomPosition()) {\r\n        const speed = this.randomSpeed();\r\n        const radius = this.options.minRadius + (this.options.maxRadius - this.options.minRadius) * ((speed - this.options.minSpeed) / (this.options.maxSpeed - this.options.minSpeed + 0.000001));\r\n        this.particles.push(new Particle(pos, speed, radius));\r\n    }\r\n}\r\n//# sourceMappingURL=ParticleManager.js.map","import { ParticleManager } from './ParticleManager.js';\r\nimport { pi } from '../helpers/helpers.js';\r\nimport { Color } from '../utility-classes/Color.js';\r\nimport { Vector2d } from '../utility-classes/Vector2d.js';\r\nconst defaultCanvasOptions = {\r\n    fillOpacity: 0.5,\r\n    edgeOpacity: 1,\r\n    mouseEdges: true,\r\n    fill: true,\r\n    fillColor: undefined,\r\n    outline: false,\r\n    outlineColor: undefined,\r\n    edges: true,\r\n    pixelDensity: 1\r\n};\r\n//Getting the size of the this and assigning it to an object\r\nexport class ParticleCanvas extends HTMLCanvasElement {\r\n    constructor() {\r\n        super();\r\n        this.hoverHandler = (e) => {\r\n            requestAnimationFrame(() => {\r\n                const mod = this.options.pixelDensity;\r\n                this.mousePosition.set(e.offsetX * mod, e.offsetY * mod);\r\n            });\r\n        };\r\n        this.mouseClickHandler = (e) => {\r\n            this.particleManager.add(this.mousePosition.copy());\r\n        };\r\n        this.mouseEnterHandler = () => {\r\n            this.mousePosition[\"active\"] = true;\r\n        };\r\n        this.mouseLeaveHandler = () => {\r\n            this.mousePosition[\"active\"] = false;\r\n        };\r\n        this.inVicinityHandler = (e) => {\r\n            if (this.options.edges)\r\n                this.renderEdge(e.p, e.q);\r\n        };\r\n        this.resize = () => {\r\n            const oldCanvasSize = { width: this.width, height: this.height, area: this.area };\r\n            this.refresh();\r\n            const sizeRatio = this.area / oldCanvasSize.area;\r\n            this.particleManager.options.vicinity *= Math.pow(sizeRatio, 0.5);\r\n            this.particleManager.particles.forEach(p => {\r\n                p.position.set(p.x * (this.width / oldCanvasSize.width), p.y * (this.height / oldCanvasSize.height));\r\n            });\r\n            this.particleManager.bounds.x = this.width;\r\n            this.particleManager.bounds.y = this.height;\r\n        };\r\n        const canvasOptions = JSON.parse(this.getAttribute('data-canvas-options'));\r\n        const particleOptions = JSON.parse(this.getAttribute('data-particle-options'));\r\n        this.options = Object.assign(Object.assign({}, defaultCanvasOptions), canvasOptions);\r\n        this.width = this.scrollWidth * this.options.pixelDensity;\r\n        this.height = this.scrollHeight * this.options.pixelDensity;\r\n        this.ctx = this.getContext('2d');\r\n        this.particleManager = new ParticleManager(particleOptions, this.width, this.height);\r\n        this.mousePosition = new Vector2d();\r\n        const sizeWatcher = new ResizeObserver(this.createResizeHandler());\r\n        sizeWatcher.observe(this);\r\n        // this.addEventListener('optionChange', this.handleOptionChange)\r\n        this.addEventListener('mouseenter', this.mouseEnterHandler);\r\n        this.addEventListener('mousemove', this.hoverHandler, { passive: true });\r\n        this.addEventListener('mouseleave', this.mouseLeaveHandler);\r\n        this.addEventListener('click', this.mouseClickHandler);\r\n        this.particleManager.on('inVicinity', this.inVicinityHandler);\r\n        const renderLoop = () => {\r\n            this.setUpParticleRendering();\r\n            this.particleManager.particles.forEach(p => {\r\n                this.particleManager.trigger('incrementTime', { details: p });\r\n            });\r\n            this.particleManager.particles.forEach(p => {\r\n                this.renderParticle(p);\r\n            });\r\n            if (this.mousePosition[\"active\"] && this.options.mouseEdges)\r\n                this.renderMouseEdges();\r\n            requestAnimationFrame(renderLoop);\r\n        };\r\n        renderLoop();\r\n    }\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n    createResizeHandler() {\r\n        let resizeId;\r\n        return (entries) => {\r\n            entries.forEach(entry => {\r\n                if (this !== entry.target)\r\n                    return;\r\n                clearTimeout(resizeId);\r\n                resizeId = setTimeout(this.resize, 200);\r\n            });\r\n        };\r\n    }\r\n    refresh() {\r\n        this.width = this.scrollWidth * this.options.pixelDensity;\r\n        this.height = this.scrollHeight * this.options.pixelDensity;\r\n    }\r\n    setUpParticleRendering() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        this.ctx.lineCap = 'round';\r\n    }\r\n    renderParticle(p) {\r\n        var _a, _b;\r\n        const ctx = this.ctx;\r\n        const opn = this.options;\r\n        ctx.globalAlpha = opn.fillOpacity;\r\n        if (opn.fill || opn.outline) {\r\n            ctx.beginPath();\r\n            ctx.arc(p.x, p.y, p.radius, 0, 2 * pi);\r\n        }\r\n        if (opn.fill) {\r\n            ctx.fillStyle = (_a = opn.fillColor) !== null && _a !== void 0 ? _a : p.color.rgba;\r\n            ctx.fill();\r\n        }\r\n        if (opn.outline) {\r\n            ctx.strokeStyle = (_b = opn.outlineColor) !== null && _b !== void 0 ? _b : p.lineColor.rgba;\r\n            ctx.lineWidth = p.radius / 3;\r\n            ctx.stroke();\r\n        }\r\n        ctx.globalAlpha = 1;\r\n    }\r\n    //Draws edges between particles within a vicinity, and also to the tracked mouse position\r\n    renderEdge(p, q) {\r\n        const ctx = this.ctx;\r\n        const opn = this.options;\r\n        const diff = p.position.minus(q.position);\r\n        const distance = diff.norm;\r\n        const radii = p.radius + q.radius;\r\n        const alpha = opn.edgeOpacity - ((distance - radii) / ((this.particleManager.options.vicinity - radii) / opn.edgeOpacity));\r\n        switch (true) {\r\n            case (opn.outlineColor !== undefined):\r\n                ctx.strokeStyle = opn.outlineColor;\r\n                break;\r\n            case (opn.outline):\r\n                ctx.strokeStyle = Color.avgColors([p.lineColor, q.lineColor]).rgba;\r\n                break;\r\n            default:\r\n                ctx.strokeStyle = Color.avgColors([p.color, q.color]).rgba;\r\n        }\r\n        ctx.globalAlpha = alpha;\r\n        ctx.lineWidth = radii / 5;\r\n        ctx.beginPath();\r\n        ctx.moveTo(p.x, p.y);\r\n        ctx.lineTo(q.x, q.y);\r\n        ctx.stroke();\r\n        ctx.globalAlpha = 1;\r\n    }\r\n    renderMouseEdges() {\r\n        this.particleManager.particles.forEach(p => {\r\n            const distance = p.position.minus(this.mousePosition).norm;\r\n            if (distance > this.particleManager.options.vicinity * 1.5)\r\n                return;\r\n            const alpha = this.options.edgeOpacity - (distance / ((this.particleManager.options.vicinity * 1.5) / this.options.edgeOpacity));\r\n            const ctx = this.ctx;\r\n            switch (true) {\r\n                case (this.options.outlineColor !== undefined):\r\n                    ctx.strokeStyle = this.options.outlineColor;\r\n                    break;\r\n                case (this.options.outline):\r\n                    ctx.strokeStyle = p.lineColor.rgba;\r\n                    break;\r\n                case (this.options.fillColor !== undefined):\r\n                    ctx.strokeStyle = this.options.fillColor;\r\n                    break;\r\n                default:\r\n                    ctx.strokeStyle = p.color.rgba;\r\n            }\r\n            ctx.globalAlpha = alpha;\r\n            ctx.lineWidth = p.radius * 0.8;\r\n            ctx.beginPath();\r\n            ctx.moveTo(p.x, p.y);\r\n            ctx.lineTo(this.mousePosition.x, this.mousePosition.y);\r\n            ctx.stroke();\r\n            ctx.globalAlpha = 1;\r\n        });\r\n    }\r\n    computedStyle(prop) {\r\n        return getComputedStyle(this).getPropertyValue(prop);\r\n    }\r\n}\r\nwindow.customElements.define('particle-canvas', ParticleCanvas, { extends: 'canvas' });\r\n//# sourceMappingURL=ParticleCanvas.js.map"],"names":[],"mappings":"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"}